{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","monster","className","alt","id","src","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","toLocaleLowerCase","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qSAIaA,G,MAAO,SAAAC,GAAU,IAClBC,EAAYD,EAAZC,QACR,OACI,sBAAKC,UAAU,iBAAf,UACI,qBACIC,IAAG,iBAAYF,EAAQG,IACvBC,IAAG,+BAA0BJ,EAAQG,GAAlC,4BACP,6BAAKH,EAAQK,OACb,kCAAKL,EAAQM,cCRZC,G,MAAW,SAAAR,GAAU,IAEtBS,EAAaT,EAAbS,SAER,OAAO,qBAAKP,UAAU,YAAf,SACFO,EAASC,KAAI,SAAAT,GAAO,OACnB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQG,WCPhBO,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACIX,UAAU,SACVY,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCqCHG,G,wDAvCb,aAAe,IAAD,8BACZ,gBAgBFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAhBtC,EAAKC,MAAQ,CAIXb,SAAU,GACVU,YAAa,IAPH,E,gEAWO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAAUkB,S,+BAOrC,IAAD,EAC2BC,KAAKN,MAA/Bb,EADD,EACCA,SAAUU,EADX,EACWA,YACZU,EAAmBpB,EAASqB,QAAO,SAAA7B,GAAO,OAC9CA,EAAQK,KAAKyB,cAAcC,SAASb,EAAYc,wBAElD,OACE,sBAAK/B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEU,YAAY,kBACZC,aAAce,KAAKf,eAErB,cAAC,EAAD,CAAUJ,SAAUoB,W,GAlCVK,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.553fd7ff.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.styles.css';\n\nexport const Card = props => {\n    const { monster } = props;\n    return (\n        <div className='card-container'>\n            <img \n                alt={`monster${monster.id}`}\n                src={`https://robohash.org/${monster.id}?set=set2&size=180x180`} />\n            <h3>{monster.name}</h3>\n            <p> {monster.email}</p>\n        </div>\n    )\n};","import React from \"react\";\nimport { Card } from \"../card/card.component\";\nimport './card-list.styles.css'\n\nexport const CardList = props => {\n\n    const { monsters } = props;\n\n    return <div className='card-list'>\n        {monsters.map(monster => (\n          <Card key={monster.id} monster={monster} />\n        ))}\n    </div>;\n}","import React from 'react';\nimport './search-box.styles.css';\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n    <input \n        className='search'\n        type='search' \n        placeholder={placeholder}\n        onChange={handleChange}\n    />\n);","import React, { Component } from 'react';\nimport { CardList } from '../src/components/card-list/card-list.component'\nimport { SearchBox } from '../src/components/search-box/search-box.component'\n\nimport './App.css';\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {  // setState is asynchronous status call\n      // Asynchronous - it will take definite amount of time to react so javascript will continue to executing rest of the code then when the event is finished it will return that finished event\n      // Synchronous - something that happens immediately.\n      // and js know the amount of time it takes to complete and wait until it finish before it continues running the rest of the code\n      monsters: [],\n      searchField: ''\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n        .then(users => this.setState({ monsters: users }));\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value })\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLocaleLowerCase()));\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox \n          placeholder='Search monsters'\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}